
local function random_location(self) 
	local newFoodLocation = {x = math.random(3, 39), y = math.random(3, 38)}
	self.food = newFoodLocation
end 

local function put_food(self) 
	self.food = {x = math.random(3, 39), y = math.random(3, 38)}
	while tilemap.get_tile("#grid", "layer1", self.food.x, self.food.y) == 4 do
		random_location(self)
	end
	tilemap.set_tile("#grid", "layer1", self.food.x, self.food.y, 3)
end

local function reset_position(self)
	self.isPlay = false;
	if (self.segments) then 
		for i, s in ipairs(self.segments) do
			tilemap.set_tile("#grid", "layer1", s.x, s.y, 1)
		end
	end
	if (self.food) then 
		tilemap.set_tile("#grid", "layer1", self.food.x, self.food.y, 1)
	end
	self.segments = {
		{x = 7, y = 24},
		{x = 8, y = 24},
		{x = 9, y = 24},
		{x = 10, y = 24}
	}
	self.dir = {x = 1, y = 0}
	self.dirqueue = {}

	self.score = 0
	self.time = 0
	self.speed = 7.0
	self.alive = true
	self.t = 0
	self.time = 0

	math.randomseed(socket.gettime())
	put_food(self)
end

function init(self)
	
	msg.post(".", "acquire_input_focus")
	reset_position(self)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)

	if not self.isPlay then 
		return
	end
	
	self.t = self.t + dt
	self.time = self.time + dt
	if self.t >= (1.0 / self.speed) and self.alive then
		local newDir = table.remove(self.dirqueue, 1)
		if newDir then 
			local opposite = newDir.x == -self.dir.x or newDir.y == -self.dir.y
			if not opposite then 
				self.dir = newDir
			end
		end
		
		local head = self.segments[#self.segments]
		local newHead = { 
			x = head.x + self.dir.x,
			y = head.y + self.dir.y
		} 
		table.insert(self.segments, newHead)

		local tile = tilemap.get_tile("#grid", "layer1", newHead.x, newHead.y)
		if tile == 2 or tile == 4 then
			sound.play("#crash")
			msg.post('#ui', "score", {time = self.time, score = self.score}) 
			reset_position(self)
			if (tile == 4) then 
				tilemap.set_tile("#grid", "layer1", newHead.x, newHead.y, 4)
			end
			msg.post("#ui", "home")
		elseif tile == 3 then 
			self.speed = self.speed + 1
			self.score = self.score + 1
			sound.play("#point")
			put_food(self)
		else 
			local tail = table.remove(self.segments, 1)
			tilemap.set_tile("#grid", "layer1", tail.x, tail.y, 1)
			sound.play("#move")
		end

		for i, s in ipairs(self.segments) do
			tilemap.set_tile("#grid", "layer1", s.x, s.y, 2)
		end

		self.t = 0
	end
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start") then 
		self.isPlay = true
	end
	
end

function on_input(self, action_id, action)
	if action_id == hash("up") and action.pressed then
		table.insert(self.dirqueue, {x = 0, y = 1})
	elseif action_id == hash("down") and action.pressed then
		table.insert(self.dirqueue, {x = 0, y = -1})
	elseif action_id == hash("left") and action.pressed then
		table.insert(self.dirqueue, {x = -1, y = 0})
	elseif action_id == hash("right") and action.pressed then 
		table.insert(self.dirqueue, {x = 1, y = 0})
	end
end


function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
